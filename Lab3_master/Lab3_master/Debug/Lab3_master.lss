
Lab3_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002ae  008002ae  00000c0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ed  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  000027a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003ced  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	3d 03       	fmul	r19, r21
  6a:	44 03       	mulsu	r20, r20
  6c:	4b 03       	fmul	r20, r19
  6e:	55 03       	mulsu	r21, r21
  70:	5f 03       	fmul	r21, r23
  72:	69 03       	fmul	r22, r17
  74:	73 03       	mulsu	r23, r19

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	12 e0       	ldi	r17, 0x02	; 2
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec ec       	ldi	r30, 0xCC	; 204
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ae 3a       	cpi	r26, 0xAE	; 174
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	ae ea       	ldi	r26, 0xAE	; 174
  9c:	b2 e0       	ldi	r27, 0x02	; 2
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3b       	cpi	r26, 0xBA	; 186
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  ac:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <refreshPORT>:
    // Configuración del pin MISO.
    DDRB &= ~(1<<PORTB3); // Se configura como INPUT.
}
//Esta función solo me sirve para refrescar los valores en los puertos.
void refreshPORT(uint8_t valor){
    if(valor & 0b10000000){
  b4:	88 23       	and	r24, r24
  b6:	24 f4       	brge	.+8      	; 0xc0 <refreshPORT+0xc>
        PORTD |= (1<<PORTD2);
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	94 60       	ori	r25, 0x04	; 4
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	03 c0       	rjmp	.+6      	; 0xc6 <refreshPORT+0x12>
    }
    else{
        PORTD &= ~(1<<PORTD2);
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	9b 7f       	andi	r25, 0xFB	; 251
  c4:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b01000000){
  c6:	86 ff       	sbrs	r24, 6
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <refreshPORT+0x1e>
        PORTD |= (1<<PORTD3);
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	98 60       	ori	r25, 0x08	; 8
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <refreshPORT+0x24>
    }
    else{
        PORTD &= ~(1<<PORTD3);
  d2:	9b b1       	in	r25, 0x0b	; 11
  d4:	97 7f       	andi	r25, 0xF7	; 247
  d6:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b00100000){
  d8:	85 ff       	sbrs	r24, 5
  da:	04 c0       	rjmp	.+8      	; 0xe4 <refreshPORT+0x30>
        PORTD |= (1<<PORTD4);
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	90 61       	ori	r25, 0x10	; 16
  e0:	9b b9       	out	0x0b, r25	; 11
  e2:	03 c0       	rjmp	.+6      	; 0xea <refreshPORT+0x36>
    }
    else{
        PORTD &= ~(1<<PORTD4);
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	9f 7e       	andi	r25, 0xEF	; 239
  e8:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b00010000){
  ea:	84 ff       	sbrs	r24, 4
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <refreshPORT+0x42>
        PORTD |= (1<<PORTD5);
  ee:	9b b1       	in	r25, 0x0b	; 11
  f0:	90 62       	ori	r25, 0x20	; 32
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	03 c0       	rjmp	.+6      	; 0xfc <refreshPORT+0x48>
    }
    else{
        PORTD &= ~(1<<PORTD5);
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	9f 7d       	andi	r25, 0xDF	; 223
  fa:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b00001000){
  fc:	83 ff       	sbrs	r24, 3
  fe:	04 c0       	rjmp	.+8      	; 0x108 <refreshPORT+0x54>
        PORTD |= (1<<PORTD6);
 100:	9b b1       	in	r25, 0x0b	; 11
 102:	90 64       	ori	r25, 0x40	; 64
 104:	9b b9       	out	0x0b, r25	; 11
 106:	03 c0       	rjmp	.+6      	; 0x10e <refreshPORT+0x5a>
    }
    else{
        PORTD &= ~(1<<PORTD6);
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	9f 7b       	andi	r25, 0xBF	; 191
 10c:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b00000100){
 10e:	82 ff       	sbrs	r24, 2
 110:	04 c0       	rjmp	.+8      	; 0x11a <refreshPORT+0x66>
        PORTD |= (1<<PORTD7);
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	90 68       	ori	r25, 0x80	; 128
 116:	9b b9       	out	0x0b, r25	; 11
 118:	03 c0       	rjmp	.+6      	; 0x120 <refreshPORT+0x6c>
    }
    else{
        PORTD &= ~(1<<PORTD7);
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	9f 77       	andi	r25, 0x7F	; 127
 11e:	9b b9       	out	0x0b, r25	; 11
    }
    if(valor & 0b00000010){
 120:	81 ff       	sbrs	r24, 1
 122:	04 c0       	rjmp	.+8      	; 0x12c <refreshPORT+0x78>
        PORTB |= (1<<PORTB0);
 124:	95 b1       	in	r25, 0x05	; 5
 126:	91 60       	ori	r25, 0x01	; 1
 128:	95 b9       	out	0x05, r25	; 5
 12a:	03 c0       	rjmp	.+6      	; 0x132 <refreshPORT+0x7e>
    }
    else{
        PORTB &= ~(1<<PORTB0);
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	9e 7f       	andi	r25, 0xFE	; 254
 130:	95 b9       	out	0x05, r25	; 5
    }
    if(valor & 0b00000001){
 132:	80 ff       	sbrs	r24, 0
 134:	04 c0       	rjmp	.+8      	; 0x13e <refreshPORT+0x8a>
        PORTB |= (1<<PORTB1);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	08 95       	ret
    }
    else{
        PORTB &= ~(1<<PORTB1);
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	85 b9       	out	0x05, r24	; 5
 144:	08 95       	ret

00000146 <WriteTextUART>:
    }
}

void WriteTextUART(char * Texto){
 146:	ac 01       	movw	r20, r24
    uint8_t i;
    for (i = 0; Texto[i] != '\0'; i++){
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	07 c0       	rjmp	.+14     	; 0x15a <WriteTextUART+0x14>
        while (!(UCSR0A & (1<<UDRE0)));
 14c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 150:	95 ff       	sbrs	r25, 5
 152:	fc cf       	rjmp	.-8      	; 0x14c <WriteTextUART+0x6>
        UDR0 = Texto[i];
 154:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    }
}

void WriteTextUART(char * Texto){
    uint8_t i;
    for (i = 0; Texto[i] != '\0'; i++){
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	fa 01       	movw	r30, r20
 15c:	e2 0f       	add	r30, r18
 15e:	f1 1d       	adc	r31, r1
 160:	30 81       	ld	r19, Z
 162:	31 11       	cpse	r19, r1
 164:	f3 cf       	rjmp	.-26     	; 0x14c <WriteTextUART+0x6>
        while (!(UCSR0A & (1<<UDRE0)));
        UDR0 = Texto[i];
    }
}
 166:	08 95       	ret

00000168 <writeUART>:

void writeUART(char Caracter){
    while(!(UCSR0A & (1<<UDRE0)));
 168:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	95 ff       	sbrs	r25, 5
 16e:	fc cf       	rjmp	.-8      	; 0x168 <writeUART>
    UDR0 = Caracter;
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 174:	08 95       	ret

00000176 <__vector_18>:
}

//***********************************************
// ISR de UART
//***********************************************
ISR(USART_RX_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
    uint8_t datoRecibido = UDR0;
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    BufferTX = datoRecibido;
 188:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <BufferTX>
    // Eco no bloqueante: se envía el dato solo si el registro está libre.
    if (UCSR0A & (1 << UDRE0)) {
 18c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	95 fd       	sbrc	r25, 5
        UDR0 = datoRecibido;
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    }
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <LecturaAscii>:

void LecturaAscii(void){
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <LecturaAscii+0x10>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LecturaAscii+0x1a>
 1be:	00 00       	nop
	//Inicializo mis variables.
	leds = 0;
	centesima = 0;
	decima = 0;
	unidad = 0;
	WriteTextUART("\n\r");
 1c0:	8b e8       	ldi	r24, 0x8B	; 139
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
	WriteTextUART("Recuerde ingresar un valor entre 0, siendo 000 a 255:  ");
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    
    // Lectura de la centésima
    WriteTextUART("\n\r");
 1d0:	8b e8       	ldi	r24, 0x8B	; 139
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("Ingresa la centesima: ");
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    BufferTX = 0;                  // Limpia BufferTX
 1e0:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <BufferTX>
    while (BufferTX == 0)
 1e4:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <BufferTX>
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <LecturaAscii+0x40>
        ; // Espera a que se reciba un carácter
    centesima = BufferTX;
 1ec:	00 91 b1 02 	lds	r16, 0x02B1	; 0x8002b1 <BufferTX>
    WriteTextUART("\n\r");
 1f0:	8b e8       	ldi	r24, 0x8B	; 139
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("El valor escogido fue: ");
 1f8:	8f e4       	ldi	r24, 0x4F	; 79
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    writeUART(centesima);
 200:	80 2f       	mov	r24, r16
 202:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	81 ee       	ldi	r24, 0xE1	; 225
 20a:	94 e0       	ldi	r25, 0x04	; 4
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <LecturaAscii+0x68>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LecturaAscii+0x72>
 216:	00 00       	nop
    
    _delay_ms(100);
    
    // Lectura de la décima
    WriteTextUART("\n\r");
 218:	8b e8       	ldi	r24, 0x8B	; 139
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("Ingresa la decima: ");
 220:	87 e6       	ldi	r24, 0x67	; 103
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    BufferTX = 0;
 228:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <BufferTX>
    while (BufferTX == 0)
 22c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <BufferTX>
 230:	88 23       	and	r24, r24
 232:	e1 f3       	breq	.-8      	; 0x22c <LecturaAscii+0x88>
        ; // Espera a que se reciba un carácter
    decima = BufferTX;
 234:	f0 90 b1 02 	lds	r15, 0x02B1	; 0x8002b1 <BufferTX>
    WriteTextUART("\n\r");
 238:	8b e8       	ldi	r24, 0x8B	; 139
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("El valor escogido fue: ");
 240:	8f e4       	ldi	r24, 0x4F	; 79
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    writeUART(decima);
 248:	8f 2d       	mov	r24, r15
 24a:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	81 ee       	ldi	r24, 0xE1	; 225
 252:	94 e0       	ldi	r25, 0x04	; 4
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <LecturaAscii+0xb0>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LecturaAscii+0xba>
 25e:	00 00       	nop
    
    _delay_ms(100);
    
    // Lectura de la unidad
    WriteTextUART("\n\r");
 260:	8b e8       	ldi	r24, 0x8B	; 139
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("Ingresa la unidad: ");
 268:	8b e7       	ldi	r24, 0x7B	; 123
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    BufferTX = 0;
 270:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <BufferTX>
    while (BufferTX == 0)
 274:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <BufferTX>
 278:	88 23       	and	r24, r24
 27a:	e1 f3       	breq	.-8      	; 0x274 <LecturaAscii+0xd0>
        ; // Espera a que se reciba un carácter
    unidad = BufferTX;
 27c:	10 91 b1 02 	lds	r17, 0x02B1	; 0x8002b1 <BufferTX>
    WriteTextUART("\n\r");
 280:	8b e8       	ldi	r24, 0x8B	; 139
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    WriteTextUART("El valor escogido fue: ");
 288:	8f e4       	ldi	r24, 0x4F	; 79
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
    writeUART(unidad);
 290:	81 2f       	mov	r24, r17
 292:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
    
    // Convertir de ASCII a número (asumiendo que se ingresaron dígitos '0'-'9')
	leds = 0;
    leds = (((centesima - 48) * 100) + ((decima - 48) * 10) + (unidad - 48));
 296:	80 2f       	mov	r24, r16
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	c0 97       	sbiw	r24, 0x30	; 48
 29c:	24 e6       	ldi	r18, 0x64	; 100
 29e:	28 9f       	mul	r18, r24
 2a0:	a0 01       	movw	r20, r0
 2a2:	29 9f       	mul	r18, r25
 2a4:	50 0d       	add	r21, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 2d       	mov	r24, r15
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9c 01       	movw	r18, r24
 2ae:	20 53       	subi	r18, 0x30	; 48
 2b0:	31 09       	sbc	r19, r1
 2b2:	b9 01       	movw	r22, r18
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	c9 01       	movw	r24, r18
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	9b 01       	movw	r18, r22
 2c8:	28 0f       	add	r18, r24
 2ca:	39 1f       	adc	r19, r25
 2cc:	24 0f       	add	r18, r20
 2ce:	35 1f       	adc	r19, r21
 2d0:	c1 2f       	mov	r28, r17
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	e0 97       	sbiw	r28, 0x30	; 48
 2d6:	c2 0f       	add	r28, r18
 2d8:	d3 1f       	adc	r29, r19
	WriteTextUART("\n \r El valor escogido fue de: ");
 2da:	8f e8       	ldi	r24, 0x8F	; 143
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
	writeUART(centesima);
 2e2:	80 2f       	mov	r24, r16
 2e4:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
	writeUART(decima);
 2e8:	8f 2d       	mov	r24, r15
 2ea:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
	writeUART(unidad);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
	//Validación que el valor esta entre 0 y 255.
	if ((leds >= 0) && (leds <= 255 ))
 2f4:	cf 3f       	cpi	r28, 0xFF	; 255
 2f6:	d1 05       	cpc	r29, r1
 2f8:	09 f0       	breq	.+2      	; 0x2fc <LecturaAscii+0x158>
 2fa:	a0 f4       	brcc	.+40     	; 0x324 <LecturaAscii+0x180>
	{
		//Si si, entonces mando el valor a SPI y refresco los leds.
		WriteTextUART("\r \n Ingreso a rango: ");
 2fc:	8e ea       	ldi	r24, 0xAE	; 174
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
		datos = leds;
		refreshPORT(datos);
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 5a 00 	call	0xb4	; 0xb4 <refreshPORT>
		spiWrite(datos);
 30a:	8c 2f       	mov	r24, r28
 30c:	0e 94 83 03 	call	0x706	; 0x706 <spiWrite>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	83 ed       	ldi	r24, 0xD3	; 211
 314:	90 e3       	ldi	r25, 0x30	; 48
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <LecturaAscii+0x172>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LecturaAscii+0x17c>
 320:	00 00       	nop
 322:	08 c0       	rjmp	.+16     	; 0x334 <LecturaAscii+0x190>
		_delay_ms(1000);
	}
	else{
		WriteTextUART("\r \n No ingreso: ");
 324:	84 ec       	ldi	r24, 0xC4	; 196
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
		WriteTextUART("\r \n El valor ingresado es incorrecto:");
 32c:	85 ed       	ldi	r24, 0xD5	; 213
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
	}
	//spiWrite(leds);
	//spiWrite(9);
	//return leds;
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	08 95       	ret

00000340 <main>:
void LecturaAscii(void);
char UART_Read();

int main(void)
{
    initUart9600();   // Inicializo mi TX y RX (115200)
 340:	0e 94 8a 03 	call	0x714	; 0x714 <initUart9600>
    sei();            // Habilito las interrupciones globales
 344:	78 94       	sei
    DDRD |= 0xFC;     // Puerto D: LEDs conectados menos en RX y TX
 346:	8a b1       	in	r24, 0x0a	; 10
 348:	8c 6f       	ori	r24, 0xFC	; 252
 34a:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0;
 34c:	1b b8       	out	0x0b, r1	; 11
    DDRB |= (1<<PORTB0) | (1<<PORTB1); //Leds más significativos.
 34e:	84 b1       	in	r24, 0x04	; 4
 350:	83 60       	ori	r24, 0x03	; 3
 352:	84 b9       	out	0x04, r24	; 4
    PORTB = 0;
 354:	15 b8       	out	0x05, r1	; 5
    BufferTX = 0;     // Limpio la variable donde recibo los datos UART.
 356:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <BufferTX>
	//Inicializo mis variables.
    numero = 0;
 35a:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <numero+0x1>
 35e:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <numero>
    primdecimal = 0;
 362:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <primdecimal>
    segdecimal = 0;
 366:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <segdecimal>
    entero = 0;
 36a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <entero>
    pedirmodo = 0;
 36e:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <pedirmodo>
    spiInit(SPI_MASTER_OSC_DIV16, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	83 e5       	ldi	r24, 0x53	; 83
 37a:	0e 94 25 03 	call	0x64a	; 0x64a <spiInit>
	//Comunico que el SPI va a estar a una frecuencia de 16	Mhz/16, tiene que ser la misma que el slave. MSB es el más significativo. Low toma la parte inferior de los datos.
	//First Edge es que empieza en el flanco positivo.    
    while (1) 
    {
		//Mi menú desplegable en la hiperterminal.
        WriteTextUART("\n\r");
 37e:	8b e8       	ldi	r24, 0x8B	; 139
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
        WriteTextUART("Que opcion desea elegir? a. Leer los valores de los potenciometros. b. Mandar un dato para lectura ASCII. ");
 386:	8b ef       	ldi	r24, 0xFB	; 251
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
		
        pedirmodo = 0;
 38e:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <pedirmodo>
        BufferTX = 0;
 392:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <BufferTX>
        // Espera hasta que se reciba 'a' (97) o 'b' (98)
        while (pedirmodo == 0)
 396:	15 c0       	rjmp	.+42     	; 0x3c2 <main+0x82>
        {
            modo = BufferTX; //BufferTX;
 398:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <BufferTX>
 39c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <modo>
            switch (modo)
 3a0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <modo>
 3a4:	81 36       	cpi	r24, 0x61	; 97
 3a6:	19 f0       	breq	.+6      	; 0x3ae <main+0x6e>
 3a8:	82 36       	cpi	r24, 0x62	; 98
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <main+0x76>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <main+0x7e>
            {
                case 97: // 'a'
                    pedirmodo = 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pedirmodo>
                    break;
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <main+0x82>
                case 98: // 'b'
                    pedirmodo = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pedirmodo>
                    break;
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <main+0x82>
				default:
					modo = 0;
 3be:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <modo>
        WriteTextUART("Que opcion desea elegir? a. Leer los valores de los potenciometros. b. Mandar un dato para lectura ASCII. ");
		
        pedirmodo = 0;
        BufferTX = 0;
        // Espera hasta que se reciba 'a' (97) o 'b' (98)
        while (pedirmodo == 0)
 3c2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <pedirmodo>
 3c6:	88 23       	and	r24, r24
 3c8:	39 f3       	breq	.-50     	; 0x398 <main+0x58>
				default:
					modo = 0;
				break;
            }
        }
        switch (modo)
 3ca:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <modo>
 3ce:	81 36       	cpi	r24, 0x61	; 97
 3d0:	21 f0       	breq	.+8      	; 0x3da <main+0x9a>
 3d2:	82 36       	cpi	r24, 0x62	; 98
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <main+0x98>
 3d6:	1b c1       	rjmp	.+566    	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
 3d8:	d2 cf       	rjmp	.-92     	; 0x37e <main+0x3e>
        {
            case 97: // Modo potenciometro
				//Inicializo mis variables.
				numero = 0;
 3da:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <numero+0x1>
 3de:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <numero>
				primdecimal = 0;
 3e2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <primdecimal>
				segdecimal = 0;
 3e6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <segdecimal>
				entero = 0;
 3ea:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <entero>
                PORTB &= ~(1<<PORTB2); // Slave Select activo
 3ee:	85 b1       	in	r24, 0x05	; 5
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	85 b9       	out	0x05, r24	; 5
                spiWrite(0); //Mando un cero que el slave lo detecta para hacer la opción del primer potenciómetro.
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 83 03 	call	0x706	; 0x706 <spiWrite>
                valorSPI = spiRead(); //Leo lo del slave.
 3fa:	0e 94 85 03 	call	0x70a	; 0x70a <spiRead>
 3fe:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
                numero = 1.96 * valorSPI; //Mapeo de 0-255 a 500-0.
 402:	68 2f       	mov	r22, r24
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__floatsisf>
 40e:	28 e4       	ldi	r18, 0x48	; 72
 410:	31 ee       	ldi	r19, 0xE1	; 225
 412:	4a ef       	ldi	r20, 0xFA	; 250
 414:	5f e3       	ldi	r21, 0x3F	; 63
 416:	0e 94 3a 04 	call	0x874	; 0x874 <__mulsf3>
 41a:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixunssfsi>
 41e:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <numero+0x1>
 422:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <numero>
                entero = numero / 100; //Separo uno por uno los bits.
 426:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <numero>
 42a:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <numero+0x1>
 42e:	36 95       	lsr	r19
 430:	27 95       	ror	r18
 432:	36 95       	lsr	r19
 434:	27 95       	ror	r18
 436:	ab e7       	ldi	r26, 0x7B	; 123
 438:	b4 e1       	ldi	r27, 0x14	; 20
 43a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__umulhisi3>
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <entero>
                primdecimal = (numero - (entero * 100)) / 10;
 446:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <entero>
 44a:	1c e9       	ldi	r17, 0x9C	; 156
 44c:	12 03       	mulsu	r17, r18
 44e:	90 01       	movw	r18, r0
 450:	11 24       	eor	r1, r1
 452:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <numero>
 456:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <numero+0x1>
 45a:	28 0f       	add	r18, r24
 45c:	39 1f       	adc	r19, r25
 45e:	ad ec       	ldi	r26, 0xCD	; 205
 460:	bc ec       	ldi	r27, 0xCC	; 204
 462:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__umulhisi3>
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <primdecimal>
                segdecimal = numero - (entero * 100) - (primdecimal * 10);
 476:	40 91 b2 02 	lds	r20, 0x02B2	; 0x8002b2 <entero>
 47a:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <primdecimal>
 47e:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <numero>
 482:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <numero+0x1>
 486:	88 0f       	add	r24, r24
 488:	98 2f       	mov	r25, r24
 48a:	99 0f       	add	r25, r25
 48c:	99 0f       	add	r25, r25
 48e:	89 0f       	add	r24, r25
 490:	81 95       	neg	r24
 492:	41 9f       	mul	r20, r17
 494:	80 0d       	add	r24, r0
 496:	11 24       	eor	r1, r1
 498:	82 0f       	add	r24, r18
 49a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <segdecimal>
                WriteTextUART("\n \r Valor_de_potenciometro_1: ");
 49e:	86 e6       	ldi	r24, 0x66	; 102
 4a0:	92 e0       	ldi	r25, 0x02	; 2
 4a2:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                writeUART(entero + 48); //Le escribo +48 por el formato ASCII.
 4a6:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <entero>
 4aa:	80 5d       	subi	r24, 0xD0	; 208
 4ac:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                WriteTextUART(".");
 4b0:	85 e8       	ldi	r24, 0x85	; 133
 4b2:	92 e0       	ldi	r25, 0x02	; 2
 4b4:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                writeUART(primdecimal + 48);
 4b8:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <primdecimal>
 4bc:	80 5d       	subi	r24, 0xD0	; 208
 4be:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                writeUART(segdecimal + 48);
 4c2:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <segdecimal>
 4c6:	80 5d       	subi	r24, 0xD0	; 208
 4c8:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                WriteTextUART("V");
 4cc:	87 e8       	ldi	r24, 0x87	; 135
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                WriteTextUART("\n\r\n\r");
 4d4:	89 e8       	ldi	r24, 0x89	; 137
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                //refreshPORT(valorSPI);
                PORTB |= (1<<PORTB2);
 4dc:	85 b1       	in	r24, 0x05	; 5
 4de:	84 60       	ori	r24, 0x04	; 4
 4e0:	85 b9       	out	0x05, r24	; 5
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	84 e3       	ldi	r24, 0x34	; 52
 4e6:	9c e0       	ldi	r25, 0x0C	; 12
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f2:	00 00       	nop
                _delay_ms(250);
                
				//Repito lo mismo que de arriba.
                PORTB &= ~(1<<PORTB2); // Slave Select activo
 4f4:	85 b1       	in	r24, 0x05	; 5
 4f6:	8b 7f       	andi	r24, 0xFB	; 251
 4f8:	85 b9       	out	0x05, r24	; 5
				numero = 0;
 4fa:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <numero+0x1>
 4fe:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <numero>
				primdecimal = 0;
 502:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <primdecimal>
				segdecimal = 0;
 506:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <segdecimal>
				entero = 0;
 50a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <entero>
                spiWrite(1);
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 83 03 	call	0x706	; 0x706 <spiWrite>
                valorSPI = spiRead();
 514:	0e 94 85 03 	call	0x70a	; 0x70a <spiRead>
 518:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
                numero = 1.96 * valorSPI;
 51c:	68 2f       	mov	r22, r24
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__floatsisf>
 528:	28 e4       	ldi	r18, 0x48	; 72
 52a:	31 ee       	ldi	r19, 0xE1	; 225
 52c:	4a ef       	ldi	r20, 0xFA	; 250
 52e:	5f e3       	ldi	r21, 0x3F	; 63
 530:	0e 94 3a 04 	call	0x874	; 0x874 <__mulsf3>
 534:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixunssfsi>
 538:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <numero+0x1>
 53c:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <numero>
                entero = numero / 100;
 540:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <numero>
 544:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <numero+0x1>
 548:	36 95       	lsr	r19
 54a:	27 95       	ror	r18
 54c:	36 95       	lsr	r19
 54e:	27 95       	ror	r18
 550:	ab e7       	ldi	r26, 0x7B	; 123
 552:	b4 e1       	ldi	r27, 0x14	; 20
 554:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__umulhisi3>
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <entero>
                primdecimal = (numero - (entero * 100)) / 10;
 560:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <entero>
 564:	12 03       	mulsu	r17, r18
 566:	90 01       	movw	r18, r0
 568:	11 24       	eor	r1, r1
 56a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <numero>
 56e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <numero+0x1>
 572:	28 0f       	add	r18, r24
 574:	39 1f       	adc	r19, r25
 576:	ad ec       	ldi	r26, 0xCD	; 205
 578:	bc ec       	ldi	r27, 0xCC	; 204
 57a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__umulhisi3>
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <primdecimal>
                segdecimal = numero - (entero * 100) - (primdecimal * 10);
 58e:	40 91 b2 02 	lds	r20, 0x02B2	; 0x8002b2 <entero>
 592:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <primdecimal>
 596:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <numero>
 59a:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <numero+0x1>
 59e:	88 0f       	add	r24, r24
 5a0:	98 2f       	mov	r25, r24
 5a2:	99 0f       	add	r25, r25
 5a4:	99 0f       	add	r25, r25
 5a6:	89 0f       	add	r24, r25
 5a8:	81 95       	neg	r24
 5aa:	41 9f       	mul	r20, r17
 5ac:	80 0d       	add	r24, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	82 0f       	add	r24, r18
 5b2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <segdecimal>
                WriteTextUART("\n \r Valor_de_potenciometro_2: ");
 5b6:	8e e8       	ldi	r24, 0x8E	; 142
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                writeUART(entero + 48);
 5be:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <entero>
 5c2:	80 5d       	subi	r24, 0xD0	; 208
 5c4:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                WriteTextUART(".");
 5c8:	85 e8       	ldi	r24, 0x85	; 133
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                writeUART(primdecimal + 48);
 5d0:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <primdecimal>
 5d4:	80 5d       	subi	r24, 0xD0	; 208
 5d6:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                writeUART(segdecimal + 48);
 5da:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <segdecimal>
 5de:	80 5d       	subi	r24, 0xD0	; 208
 5e0:	0e 94 b4 00 	call	0x168	; 0x168 <writeUART>
                WriteTextUART("V");
 5e4:	87 e8       	ldi	r24, 0x87	; 135
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                WriteTextUART("\n\r\n\r");
 5ec:	89 e8       	ldi	r24, 0x89	; 137
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	0e 94 a3 00 	call	0x146	; 0x146 <WriteTextUART>
                //refreshPORT(valorSPI);
                PORTB |= (1<<PORTB2);
 5f4:	85 b1       	in	r24, 0x05	; 5
 5f6:	84 60       	ori	r24, 0x04	; 4
 5f8:	85 b9       	out	0x05, r24	; 5
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	84 e3       	ldi	r24, 0x34	; 52
 5fe:	9c e0       	ldi	r25, 0x0C	; 12
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
 608:	00 c0       	rjmp	.+0      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
 60a:	00 00       	nop
 60c:	b8 ce       	rjmp	.-656    	; 0x37e <main+0x3e>
                _delay_ms(250);
                break;
                
            case 98: // Modo formato ASCII
                PORTB &= ~(1<<PORTB2); // Slave Select activo
 60e:	85 b1       	in	r24, 0x05	; 5
 610:	8b 7f       	andi	r24, 0xFB	; 251
 612:	85 b9       	out	0x05, r24	; 5
				spiWrite(2);		   // Escribo lo mismo para el slave.
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	0e 94 83 03 	call	0x706	; 0x706 <spiWrite>
 61a:	2f ef       	ldi	r18, 0xFF	; 255
 61c:	81 ee       	ldi	r24, 0xE1	; 225
 61e:	94 e0       	ldi	r25, 0x04	; 4
 620:	21 50       	subi	r18, 0x01	; 1
 622:	80 40       	sbci	r24, 0x00	; 0
 624:	90 40       	sbci	r25, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
 628:	00 c0       	rjmp	.+0      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 62a:	00 00       	nop
				_delay_ms(100);
                LecturaAscii();		   //Llamo mi función para mi valor ASCII.
 62c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LecturaAscii>
                PORTB |= (1<<PORTB2);
 630:	85 b1       	in	r24, 0x05	; 5
 632:	84 60       	ori	r24, 0x04	; 4
 634:	85 b9       	out	0x05, r24	; 5
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	84 e3       	ldi	r24, 0x34	; 52
 63a:	9c e0       	ldi	r25, 0x0C	; 12
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
 644:	00 c0       	rjmp	.+0      	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 646:	00 00       	nop
 648:	9a ce       	rjmp	.-716    	; 0x37e <main+0x3e>

0000064a <spiInit>:
{
	if(SPSR & (1<<SPIF))
	return 1;
	else
	return 0;
}
 64a:	e8 2f       	mov	r30, r24
 64c:	84 ff       	sbrs	r24, 4
 64e:	54 c0       	rjmp	.+168    	; 0x6f8 <spiInit+0xae>
 650:	84 b1       	in	r24, 0x04	; 4
 652:	8c 62       	ori	r24, 0x2C	; 44
 654:	84 b9       	out	0x04, r24	; 4
 656:	84 b1       	in	r24, 0x04	; 4
 658:	8f 7e       	andi	r24, 0xEF	; 239
 65a:	84 b9       	out	0x04, r24	; 4
 65c:	8c b5       	in	r24, 0x2c	; 44
 65e:	80 61       	ori	r24, 0x10	; 16
 660:	8c bd       	out	0x2c, r24	; 44
 662:	e7 70       	andi	r30, 0x07	; 7
 664:	8e 2f       	mov	r24, r30
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	87 30       	cpi	r24, 0x07	; 7
 66a:	91 05       	cpc	r25, r1
 66c:	08 f0       	brcs	.+2      	; 0x670 <spiInit+0x26>
 66e:	44 c0       	rjmp	.+136    	; 0x6f8 <spiInit+0xae>
 670:	fc 01       	movw	r30, r24
 672:	ec 5c       	subi	r30, 0xCC	; 204
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__tablejump2__>
 67a:	8c b5       	in	r24, 0x2c	; 44
 67c:	8c 7f       	andi	r24, 0xFC	; 252
 67e:	8c bd       	out	0x2c, r24	; 44
 680:	8d b5       	in	r24, 0x2d	; 45
 682:	81 60       	ori	r24, 0x01	; 1
 684:	8d bd       	out	0x2d, r24	; 45
 686:	38 c0       	rjmp	.+112    	; 0x6f8 <spiInit+0xae>
 688:	8c b5       	in	r24, 0x2c	; 44
 68a:	8c 7f       	andi	r24, 0xFC	; 252
 68c:	8c bd       	out	0x2c, r24	; 44
 68e:	8d b5       	in	r24, 0x2d	; 45
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	8d bd       	out	0x2d, r24	; 45
 694:	31 c0       	rjmp	.+98     	; 0x6f8 <spiInit+0xae>
 696:	8c b5       	in	r24, 0x2c	; 44
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	8c bd       	out	0x2c, r24	; 44
 69c:	8c b5       	in	r24, 0x2c	; 44
 69e:	8d 7f       	andi	r24, 0xFD	; 253
 6a0:	8c bd       	out	0x2c, r24	; 44
 6a2:	8d b5       	in	r24, 0x2d	; 45
 6a4:	81 60       	ori	r24, 0x01	; 1
 6a6:	8d bd       	out	0x2d, r24	; 45
 6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <spiInit+0xae>
 6aa:	8c b5       	in	r24, 0x2c	; 44
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	8c bd       	out	0x2c, r24	; 44
 6b0:	8c b5       	in	r24, 0x2c	; 44
 6b2:	8d 7f       	andi	r24, 0xFD	; 253
 6b4:	8c bd       	out	0x2c, r24	; 44
 6b6:	8d b5       	in	r24, 0x2d	; 45
 6b8:	8e 7f       	andi	r24, 0xFE	; 254
 6ba:	8d bd       	out	0x2d, r24	; 45
 6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <spiInit+0xae>
 6be:	8c b5       	in	r24, 0x2c	; 44
 6c0:	82 60       	ori	r24, 0x02	; 2
 6c2:	8c bd       	out	0x2c, r24	; 44
 6c4:	8c b5       	in	r24, 0x2c	; 44
 6c6:	8e 7f       	andi	r24, 0xFE	; 254
 6c8:	8c bd       	out	0x2c, r24	; 44
 6ca:	8d b5       	in	r24, 0x2d	; 45
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	8d bd       	out	0x2d, r24	; 45
 6d0:	13 c0       	rjmp	.+38     	; 0x6f8 <spiInit+0xae>
 6d2:	8c b5       	in	r24, 0x2c	; 44
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	8c bd       	out	0x2c, r24	; 44
 6d8:	8c b5       	in	r24, 0x2c	; 44
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	8c bd       	out	0x2c, r24	; 44
 6de:	8d b5       	in	r24, 0x2d	; 45
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	8d bd       	out	0x2d, r24	; 45
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <spiInit+0xae>
 6e6:	8c b5       	in	r24, 0x2c	; 44
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	8c bd       	out	0x2c, r24	; 44
 6ec:	8c b5       	in	r24, 0x2c	; 44
 6ee:	82 60       	ori	r24, 0x02	; 2
 6f0:	8c bd       	out	0x2c, r24	; 44
 6f2:	8d b5       	in	r24, 0x2d	; 45
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	8d bd       	out	0x2d, r24	; 45
 6f8:	8c b5       	in	r24, 0x2c	; 44
 6fa:	46 2b       	or	r20, r22
 6fc:	24 2b       	or	r18, r20
 6fe:	28 2b       	or	r18, r24
 700:	20 64       	ori	r18, 0x40	; 64
 702:	2c bd       	out	0x2c, r18	; 44
 704:	08 95       	ret

00000706 <spiWrite>:
 706:	8e bd       	out	0x2e, r24	; 46
 708:	08 95       	ret

0000070a <spiRead>:

char spiRead()
{
	while (!(SPSR & (1<<SPIF)));
 70a:	0d b4       	in	r0, 0x2d	; 45
 70c:	07 fe       	sbrs	r0, 7
 70e:	fd cf       	rjmp	.-6      	; 0x70a <spiRead>
	return SPDR;
 710:	8e b5       	in	r24, 0x2e	; 46
}
 712:	08 95       	ret

00000714 <initUart9600>:


void initUart9600(void){
	//Paso 1: RX como entrada y TX como salida.
	DDRD |= (1<<DDD1);
 714:	8a b1       	in	r24, 0x0a	; 10
 716:	82 60       	ori	r24, 0x02	; 2
 718:	8a b9       	out	0x0a, r24	; 10
	DDRD &=	~(1<<DDD0);
 71a:	8a b1       	in	r24, 0x0a	; 10
 71c:	8e 7f       	andi	r24, 0xFE	; 254
 71e:	8a b9       	out	0x0a, r24	; 10
	//Paso 2: Configurar UCSR0A
	UCSR0A = 0;
 720:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Paso 3: Configurar UCSR0B: habilitamos ISR de recepción y RX Y TX.
	UCSR0B = 0;
 724:	e1 ec       	ldi	r30, 0xC1	; 193
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0); //Estoy activando la bandera que me indica que se recibió el mensaje.
 72a:	80 81       	ld	r24, Z
 72c:	88 69       	ori	r24, 0x98	; 152
 72e:	80 83       	st	Z, r24
	//Paso 4: COnfigurar UCSR0C: Primero asíncrono, sin pariedad, bit 1 de stop, Data bits/ 8 bits,
	UCSR0C = 0;
 730:	e2 ec       	ldi	r30, 0xC2	; 194
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 736:	80 81       	ld	r24, Z
 738:	86 60       	ori	r24, 0x06	; 6
 73a:	80 83       	st	Z, r24
	//Paso 5: Configurar velocidad de Baudrate: 115200
	UBRR0 = 8;
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 744:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 748:	08 95       	ret

0000074a <__fixunssfsi>:
 74a:	0e 94 19 04 	call	0x832	; 0x832 <__fp_splitA>
 74e:	88 f0       	brcs	.+34     	; 0x772 <__fixunssfsi+0x28>
 750:	9f 57       	subi	r25, 0x7F	; 127
 752:	98 f0       	brcs	.+38     	; 0x77a <__fixunssfsi+0x30>
 754:	b9 2f       	mov	r27, r25
 756:	99 27       	eor	r25, r25
 758:	b7 51       	subi	r27, 0x17	; 23
 75a:	b0 f0       	brcs	.+44     	; 0x788 <__fixunssfsi+0x3e>
 75c:	e1 f0       	breq	.+56     	; 0x796 <__fixunssfsi+0x4c>
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	1a f0       	brmi	.+6      	; 0x76e <__fixunssfsi+0x24>
 768:	ba 95       	dec	r27
 76a:	c9 f7       	brne	.-14     	; 0x75e <__fixunssfsi+0x14>
 76c:	14 c0       	rjmp	.+40     	; 0x796 <__fixunssfsi+0x4c>
 76e:	b1 30       	cpi	r27, 0x01	; 1
 770:	91 f0       	breq	.+36     	; 0x796 <__fixunssfsi+0x4c>
 772:	0e 94 33 04 	call	0x866	; 0x866 <__fp_zero>
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	08 95       	ret
 77a:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_zero>
 77e:	67 2f       	mov	r22, r23
 780:	78 2f       	mov	r23, r24
 782:	88 27       	eor	r24, r24
 784:	b8 5f       	subi	r27, 0xF8	; 248
 786:	39 f0       	breq	.+14     	; 0x796 <__fixunssfsi+0x4c>
 788:	b9 3f       	cpi	r27, 0xF9	; 249
 78a:	cc f3       	brlt	.-14     	; 0x77e <__fixunssfsi+0x34>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b3 95       	inc	r27
 794:	d9 f7       	brne	.-10     	; 0x78c <__fixunssfsi+0x42>
 796:	3e f4       	brtc	.+14     	; 0x7a6 <__fixunssfsi+0x5c>
 798:	90 95       	com	r25
 79a:	80 95       	com	r24
 79c:	70 95       	com	r23
 79e:	61 95       	neg	r22
 7a0:	7f 4f       	sbci	r23, 0xFF	; 255
 7a2:	8f 4f       	sbci	r24, 0xFF	; 255
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__floatunsisf>:
 7a8:	e8 94       	clt
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <__floatsisf+0x12>

000007ac <__floatsisf>:
 7ac:	97 fb       	bst	r25, 7
 7ae:	3e f4       	brtc	.+14     	; 0x7be <__floatsisf+0x12>
 7b0:	90 95       	com	r25
 7b2:	80 95       	com	r24
 7b4:	70 95       	com	r23
 7b6:	61 95       	neg	r22
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	8f 4f       	sbci	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	99 23       	and	r25, r25
 7c0:	a9 f0       	breq	.+42     	; 0x7ec <__floatsisf+0x40>
 7c2:	f9 2f       	mov	r31, r25
 7c4:	96 e9       	ldi	r25, 0x96	; 150
 7c6:	bb 27       	eor	r27, r27
 7c8:	93 95       	inc	r25
 7ca:	f6 95       	lsr	r31
 7cc:	87 95       	ror	r24
 7ce:	77 95       	ror	r23
 7d0:	67 95       	ror	r22
 7d2:	b7 95       	ror	r27
 7d4:	f1 11       	cpse	r31, r1
 7d6:	f8 cf       	rjmp	.-16     	; 0x7c8 <__floatsisf+0x1c>
 7d8:	fa f4       	brpl	.+62     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7da:	bb 0f       	add	r27, r27
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__floatsisf+0x36>
 7de:	60 ff       	sbrs	r22, 0
 7e0:	1b c0       	rjmp	.+54     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ec:	88 23       	and	r24, r24
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <__floatsisf+0x48>
 7f0:	96 e9       	ldi	r25, 0x96	; 150
 7f2:	11 c0       	rjmp	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f4:	77 23       	and	r23, r23
 7f6:	21 f0       	breq	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
 7f8:	9e e8       	ldi	r25, 0x8E	; 142
 7fa:	87 2f       	mov	r24, r23
 7fc:	76 2f       	mov	r23, r22
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	66 23       	and	r22, r22
 802:	71 f0       	breq	.+28     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 804:	96 e8       	ldi	r25, 0x86	; 134
 806:	86 2f       	mov	r24, r22
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	2a f0       	brmi	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	9a 95       	dec	r25
 810:	66 0f       	add	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	da f7       	brpl	.-10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 818:	88 0f       	add	r24, r24
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <__fp_split3>:
 822:	57 fd       	sbrc	r21, 7
 824:	90 58       	subi	r25, 0x80	; 128
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	59 f0       	breq	.+22     	; 0x842 <__fp_splitA+0x10>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	71 f0       	breq	.+28     	; 0x84c <__fp_splitA+0x1a>
 830:	47 95       	ror	r20

00000832 <__fp_splitA>:
 832:	88 0f       	add	r24, r24
 834:	97 fb       	bst	r25, 7
 836:	99 1f       	adc	r25, r25
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_splitA+0x20>
 83a:	9f 3f       	cpi	r25, 0xFF	; 255
 83c:	79 f0       	breq	.+30     	; 0x85c <__fp_splitA+0x2a>
 83e:	87 95       	ror	r24
 840:	08 95       	ret
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	55 1f       	adc	r21, r21
 84a:	f2 cf       	rjmp	.-28     	; 0x830 <__fp_split3+0xe>
 84c:	46 95       	lsr	r20
 84e:	f1 df       	rcall	.-30     	; 0x832 <__fp_splitA>
 850:	08 c0       	rjmp	.+16     	; 0x862 <__fp_splitA+0x30>
 852:	16 16       	cp	r1, r22
 854:	17 06       	cpc	r1, r23
 856:	18 06       	cpc	r1, r24
 858:	99 1f       	adc	r25, r25
 85a:	f1 cf       	rjmp	.-30     	; 0x83e <__fp_splitA+0xc>
 85c:	86 95       	lsr	r24
 85e:	71 05       	cpc	r23, r1
 860:	61 05       	cpc	r22, r1
 862:	08 94       	sec
 864:	08 95       	ret

00000866 <__fp_zero>:
 866:	e8 94       	clt

00000868 <__fp_szero>:
 868:	bb 27       	eor	r27, r27
 86a:	66 27       	eor	r22, r22
 86c:	77 27       	eor	r23, r23
 86e:	cb 01       	movw	r24, r22
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__mulsf3>:
 874:	0e 94 4d 04 	call	0x89a	; 0x89a <__mulsf3x>
 878:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_round>
 87c:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_pscA>
 880:	38 f0       	brcs	.+14     	; 0x890 <__mulsf3+0x1c>
 882:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_pscB>
 886:	20 f0       	brcs	.+8      	; 0x890 <__mulsf3+0x1c>
 888:	95 23       	and	r25, r21
 88a:	11 f0       	breq	.+4      	; 0x890 <__mulsf3+0x1c>
 88c:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_inf>
 890:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_nan>
 894:	11 24       	eor	r1, r1
 896:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_szero>

0000089a <__mulsf3x>:
 89a:	0e 94 11 04 	call	0x822	; 0x822 <__fp_split3>
 89e:	70 f3       	brcs	.-36     	; 0x87c <__mulsf3+0x8>

000008a0 <__mulsf3_pse>:
 8a0:	95 9f       	mul	r25, r21
 8a2:	c1 f3       	breq	.-16     	; 0x894 <__mulsf3+0x20>
 8a4:	95 0f       	add	r25, r21
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	55 1f       	adc	r21, r21
 8aa:	62 9f       	mul	r22, r18
 8ac:	f0 01       	movw	r30, r0
 8ae:	72 9f       	mul	r23, r18
 8b0:	bb 27       	eor	r27, r27
 8b2:	f0 0d       	add	r31, r0
 8b4:	b1 1d       	adc	r27, r1
 8b6:	63 9f       	mul	r22, r19
 8b8:	aa 27       	eor	r26, r26
 8ba:	f0 0d       	add	r31, r0
 8bc:	b1 1d       	adc	r27, r1
 8be:	aa 1f       	adc	r26, r26
 8c0:	64 9f       	mul	r22, r20
 8c2:	66 27       	eor	r22, r22
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	66 1f       	adc	r22, r22
 8ca:	82 9f       	mul	r24, r18
 8cc:	22 27       	eor	r18, r18
 8ce:	b0 0d       	add	r27, r0
 8d0:	a1 1d       	adc	r26, r1
 8d2:	62 1f       	adc	r22, r18
 8d4:	73 9f       	mul	r23, r19
 8d6:	b0 0d       	add	r27, r0
 8d8:	a1 1d       	adc	r26, r1
 8da:	62 1f       	adc	r22, r18
 8dc:	83 9f       	mul	r24, r19
 8de:	a0 0d       	add	r26, r0
 8e0:	61 1d       	adc	r22, r1
 8e2:	22 1f       	adc	r18, r18
 8e4:	74 9f       	mul	r23, r20
 8e6:	33 27       	eor	r19, r19
 8e8:	a0 0d       	add	r26, r0
 8ea:	61 1d       	adc	r22, r1
 8ec:	23 1f       	adc	r18, r19
 8ee:	84 9f       	mul	r24, r20
 8f0:	60 0d       	add	r22, r0
 8f2:	21 1d       	adc	r18, r1
 8f4:	82 2f       	mov	r24, r18
 8f6:	76 2f       	mov	r23, r22
 8f8:	6a 2f       	mov	r22, r26
 8fa:	11 24       	eor	r1, r1
 8fc:	9f 57       	subi	r25, 0x7F	; 127
 8fe:	50 40       	sbci	r21, 0x00	; 0
 900:	9a f0       	brmi	.+38     	; 0x928 <__stack+0x29>
 902:	f1 f0       	breq	.+60     	; 0x940 <__stack+0x41>
 904:	88 23       	and	r24, r24
 906:	4a f0       	brmi	.+18     	; 0x91a <__stack+0x1b>
 908:	ee 0f       	add	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	bb 1f       	adc	r27, r27
 90e:	66 1f       	adc	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	91 50       	subi	r25, 0x01	; 1
 916:	50 40       	sbci	r21, 0x00	; 0
 918:	a9 f7       	brne	.-22     	; 0x904 <__stack+0x5>
 91a:	9e 3f       	cpi	r25, 0xFE	; 254
 91c:	51 05       	cpc	r21, r1
 91e:	80 f0       	brcs	.+32     	; 0x940 <__stack+0x41>
 920:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_inf>
 924:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_szero>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	e4 f3       	brlt	.-8      	; 0x924 <__stack+0x25>
 92c:	98 3e       	cpi	r25, 0xE8	; 232
 92e:	d4 f3       	brlt	.-12     	; 0x924 <__stack+0x25>
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	e7 95       	ror	r30
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	c1 f7       	brne	.-16     	; 0x930 <__stack+0x31>
 940:	fe 2b       	or	r31, r30
 942:	88 0f       	add	r24, r24
 944:	91 1d       	adc	r25, r1
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	97 f9       	bld	r25, 7
 94c:	08 95       	ret

0000094e <__fp_inf>:
 94e:	97 f9       	bld	r25, 7
 950:	9f 67       	ori	r25, 0x7F	; 127
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	08 95       	ret

0000095a <__fp_nan>:
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	08 95       	ret

00000960 <__fp_pscA>:
 960:	00 24       	eor	r0, r0
 962:	0a 94       	dec	r0
 964:	16 16       	cp	r1, r22
 966:	17 06       	cpc	r1, r23
 968:	18 06       	cpc	r1, r24
 96a:	09 06       	cpc	r0, r25
 96c:	08 95       	ret

0000096e <__fp_pscB>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	05 06       	cpc	r0, r21
 97a:	08 95       	ret

0000097c <__fp_round>:
 97c:	09 2e       	mov	r0, r25
 97e:	03 94       	inc	r0
 980:	00 0c       	add	r0, r0
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0xc>
 984:	88 23       	and	r24, r24
 986:	52 f0       	brmi	.+20     	; 0x99c <__fp_round+0x20>
 988:	bb 0f       	add	r27, r27
 98a:	40 f4       	brcc	.+16     	; 0x99c <__fp_round+0x20>
 98c:	bf 2b       	or	r27, r31
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0x18>
 990:	60 ff       	sbrs	r22, 0
 992:	04 c0       	rjmp	.+8      	; 0x99c <__fp_round+0x20>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__tablejump2__>:
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	05 90       	lpm	r0, Z+
 9a4:	f4 91       	lpm	r31, Z
 9a6:	e0 2d       	mov	r30, r0
 9a8:	09 94       	ijmp

000009aa <__umulhisi3>:
 9aa:	a2 9f       	mul	r26, r18
 9ac:	b0 01       	movw	r22, r0
 9ae:	b3 9f       	mul	r27, r19
 9b0:	c0 01       	movw	r24, r0
 9b2:	a3 9f       	mul	r26, r19
 9b4:	70 0d       	add	r23, r0
 9b6:	81 1d       	adc	r24, r1
 9b8:	11 24       	eor	r1, r1
 9ba:	91 1d       	adc	r25, r1
 9bc:	b2 9f       	mul	r27, r18
 9be:	70 0d       	add	r23, r0
 9c0:	81 1d       	adc	r24, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
